otro curso que he mirado rapido https://www.youtube.com/watch?v=ovEhcf7c8Y4&ab_channel=InformaticaLive 4 horas y mdia todo en el mismo video 

https://www.youtube.com/playlist?list=PLXOcVQr8g7b-BL5sf4LXl1Mmi8Er3XJdF en este vi lo del inspector



https://www.bing.com/videos/search?q=curso+playwright&&view=detail&mid=8EAC8E6799EC287E01C78EAC8E6799EC287E01C7&FORM=VAMGZC

PLAYLIST 
https://www.youtube.com/playlist?list=PLeo6Q1inqlOdzwuW6ivlX_95682PfsGGG

2-

genera toda la config para lo que nos va pidiendo...typescript, donde pondré los tests , no usaré github , descarga todos los browsers para ejecutar 
npm init playwright@latest
arma todo playwright.config.ts -- comento resto navegadores que no sea chromium - 
package.json opne la version de playwright q vamos a usar 


ejecutar los test por consola - npx playwright test o con icono matrás + play 

npx playwright show-report para ver el report 

3- 
headless por defecto no abre browser- cambiar en playwright.config.ts ---> use: headless:false 
uso de localizadores en una pagina de venta d móviles

4- 
obtención de los títulos del resultado de busqueda de iphones e imprimirlos , obteniéndolos con xpath y con css (ojo que el xpath q pone el no funciona porque ahora la pagina imprime de otra manera 
		son li con h2  //ol[contains(@class,'ui-search-layout')]//li//h2 
		
		
		//ol[contains(@class,'ui-search-layout')]//a[contains(@class,'poly-component__title')]
		
5- herramienta code generator - abre  navegador y hace acciones y las graba para darnos idea 
npx playwright codegen https://www.alten.es 
matraz - menu abajo  de playwright - record new y crea un test....spect.ts vacio q vamos rellenando 

desde linea de comando lanza el inspector c:\ROCIO\FORMACION\PLAYWRIGHT\cusro julianmesa>npx playwright codegen https://saucedemo.com
...limpiar todo lo que no me conviene 

6- busqueda por xpath y selectors css 
 
 xpath sera con doble slash sera relativo y simple slash sera absoluto 
 //elemento[@idpropiedad=""]
 ejemplo 
 //input[@type='text]
 //input[@name='nombre de l input']
 //input[@class='nombrfeclase']
 
 CSS 
 elemento[propiedad="valor] o bien tipo shortcut elemento.nombrepropiedad (by propiedad) 
 > para hacer relativo
 
 input.nombrecalse
 input.nombredelname 
 
 para playwright await page.locator('xpath=//input....').fill('algo') sin la palabra xpath tb vale con la doble slash entiende q es un xpath y si ponemos aspecto de css selector lo entiende tambien 
 
7- getByPlaceholder , getByAltText, getByRole(accesibilidad)

ej de DOM <input type="email" placeholder="name@example.com"....

getByAltText basado en la propiedad alt descripción de la imagen que viene en las imagenes <img alt='Playwright logo'>

minuto 8 aprox¿como saber el role de un elemento?-inspect- elements-accesibility muestra arbol de accesibilidad y ahí con el sombreado y en la parte de la pestaña de accesibilidad me muestra el role

si hay dos roles con el mismo identificador y el name por ejemplo que los dos contienen la palabra que busco por ejemplo me daría error --> añado exact:true es decir el name específico q pongo
await page.getByRole('link', {name:'palabra',exact:true}).click()

8- automatizcacacion de una compra saucedemo.com 
lo he hecho con IA ---pone locators...luego he usado los Role cuando podía 
uso de toEqual comparativa de dos tipos primitivos en aserciones 
uso locator.all --- para obtener toda  la lista de localizadores 
uso de innerText en lugar de textContent pq muestra texto tal cual lo ve el usuario 

9- actualizació de playwright - fichero package.json - dice con lo que estoy , saber cual es la current y si esta actualizada npm outdate @playwright/test
npm install -D @playwritght/test@latest (la última o bien @version la que queramos
asociado hay que actualizar los browsers q realmente están en esta - ruta miusuario/AppData/local/ms-playwright ---> ejecuto npm playwritght install y se descarga nueva vers de navegadores

10-continuar con el checkout 
page.pause --- > me está sacando el inspector y le tengo q dar a continuar 
importante...Role no era representativo asi que mejor cojo css para el caso del botón de carrito

11- PAGE OBJECT MODEL https://www.youtube.com/watch?v=cxBRyfnwkkk&list=PLeo6Q1inqlOdzwuW6ivlX_95682PfsGGG&index=11&ab_channel=JulianMesa
separa logica de acciones con la pagina 
pagina de login 1- localizacion de elementos 2- interaccion fill 
pagina de listado de productos
pagina d carrito
pagina de checkout 
12- pageobject d loginpage con distintos ususaraios
13- configuracion de distintos ambientes por fichero , lectura de variables de ese fichero
playwright.config.ts --buscar dond pone read environment variables from file - tenemos q instalar npm i dotenv --save-dev
para hacer esta lectura hay que usar la libreria dotenv por eso instalo 
y descomento en el playwright.config.ts la parte de require... para que así sepa leer el archivo que le pongo 

14-testing de tablas
busqueda de selectores con chrome inspector (ctrol- f) 
//table[@id='countries']
busqueda de filas y columnas //table[@id='countries']//tr[2]//td[5]

en configuracion timeout se puede configurar dentro de define config 
 timeout: 60_000, 
  expect:{
    timeout: 200_000
  },
  para este ejercicio que tomará mucho tiempo lo ponemos a 60mil milisec 
https://www.youtube.com/watch?v=SvrIsoDd01w&list=PLeo6Q1inqlOdzwuW6ivlX_95682PfsGGG&index=14&ab_channel=JulianMesa

15- captura d pantalla
de dos formas...o en cualquier parte- ver saucedemoScreenshot.spec.ts 
o bien desde config 
	en objeto use definido screenshot: { mode: 'only-on-failure', fullPage:true}, - distintos modos - on- > al final del test hace una captura 
	
observar en playwright-report-> index.html - btn derecho reveal in explorer y se ve que dentro del test ...todos sus pasos, añade lo que es el screeshot	

si añadimos testInfo aquí test('compra de un elemento con capturas de pantalla incluidos en reporte', async ({ page }, testInfo) => {
  y la llamada de esta forma  
    await testInfo.attach('success screenshot', {
    body: await page.screenshot(),
    contentType: 'image/png'
  });
se ve igualmente en el index.html  y podemos ver la imagen en grande si clicamos en el fichero png 

16- ejecucion por consola 
en local como tengo el plugin de playwright puedo hacerlo con el vscode pero supongamos en un entorno de CICD
npx playwright test - ejecuta todos los que est´n bajo la carpeta test 
ejecutar por nombre archivo donde esta el test -g parte del nombre del test
npx playwright test saucedemoPO.spec.ts -g "compra random" 
ejecutar n veces el mismo test 
npx playwright test saucedemoPO.spec.ts -g "compra random" --repeat-each-5

npx playwright show-report

17- INTERCEPTOR
agilizar la carga de recursos web como por ej traer de sitio web imagenes 
despues de ejecutar el test y dentro del browser que abre---> chrome-inspect-network 
se ver la peticion al servidor REQUEST URL....se ve lo que trda en traer imagen 
si elimino ese tipo de cargas, ahorro tiempo en los test 
creo clase interceptor.spec.ts que tiene un test de login como lo q he hecho antes pero añadiendo al ppio
await page.on("request",req => {
  console.log("Request made with url: " + req.url());
}); con esto logo todas las imagenes que veo q esta trayendo ,copio dos de ellas 
Request made with url: https://www.saucedemo.com/static/media/bike-light-1200x1500.37c843b0.jpg
Request made with url: https://www.saucedemo.com/static/media/bolt-shirt-1200x1500.c2599ac5.jpg
y le digo que cuando se encuentre con ellas que no las cargue (puedo comprobarlo con un screenshot) 
await page.route ('https://www.saucedemo.com/static/media/bike-light-1200x1500.37c843b0.jpg', route => {
  console.log("Intercepted request for bike-light-1200x1500.37c 843b0.jpg");
  route.abort();        // Abort the request
}); incluso se pueden usar expresiones regulares para evitar imagenes 

18- modificar respuesta de servicios q tardan mucho- o cambiar la respuesta de lo que devuelve el servicio...
demoqa.com/books inspeccionamos network y vemos header - request y response con el json de los libros devueltos

https://www.youtube.com/watch?v=7c-DT5fKXgI&list=PLeo6Q1inqlOdzwuW6ivlX_95682PfsGGG&index=18&ab_channel=JulianMesa

 preparo un tst de forma que intercepto el rquest q me muestra los libros (lo identifico con el inspector chrome https://demoqa.com/BookStore/v1/Books)
 
 y modifico la respuesta con fulfill (los datos de status los obtengo del inspector de chrome)--cambio el body de la respuesta quitando del json los libros , dejando uno solo, modificando el titulo del libro que mostraré ..etc 



19- debugger
x linea de comandos 
npx playwright test saucedemoPODebug.spec.ts -g "login nok con usuario standar" --debug 
abre navegador y inspector de playwright donde con flecha curva puedo ir step a step

analizamos variables ejecutando desde el VSCode con Breakpoints incluso cambiar valor addwatch +set value con botón derecho 

20-uso con github actions y definir flujo de trabajo
documentacion playwright.dev/docs/ci-intro 
creamos carpeta .github otra workflows y fichero playwright.yml --- practicamente lo he hecho con ia aunque el video pone otras opciones
subimos todo esto nuevo ---> ver en mi repo una pestaña Actions 
al acabar la ejecucion ver trazas 
Artifact download URL: https://github.com/rdiosalf/playwright_training/actions/runs/17040767625/artifacts/3788351276
como en las máqunas q ejecuta github Actions no tiene ifz grafica ponemos en configuración de playwright ponemos HEADLESS true 
puedo descargar el reporte 

21-22-23-24jenkins y docker 
docuemntacion playwright.dev/docs/docker 
hay una imagen para correr nuestros test https://mcr.microsoft.com/en-us/artifact/mar/playwright/about 
uso de imagen de jenkins hub.docker.com/_/jenkins e imagen de playwright
con docker traigo l imagen de jenkins y luego dentro de jenkins necesito docker otra vez para  con este otro docker hago otra imagen de playwright 
version específica de playwright para esto v1.40.0 pero aconsejan usar la misma imagen que yo estoy usando en mis test (recordar en package.json     "@playwright/test": "^1.54.2",) 
otra forma es dentro del jenkins instalar todo lo de playwright 
instalación de docker - no lo hago porq ya lo tengo 
c:\ROCIO\FORMACION\PLAYWRIGHT\cusro julianmesa>docker --version
Docker version 28.1.1, build 4eba377

Dockerfile - a partir d la imagen de jenkins, con el usuario ROOT me traigo docker y genero imagen de jenkins , ruta donde está el archivo Dockerfile y construyo una imagen con el comando
docker build --tag docker-in-docker-jenkins .
crar un contenedor a partir de esa imagen con mapeo al pto 8080 -name el nombre q le doy al contenedor y por último la imagen creada
docker run -v "//var/run/docker.sock:/var/run/docker.sock" -p 8080:8080 - v jenkins_home:/var/jenkins_home --name jenkins docker-in-docker-jenkins 
ejecuto y nos ofrece la contraseña x defecto del usu admin, voy al localhost:8080 y sale jenkins 
en el pipeline pongo en el stage que instale las dependencias y ejecute los test (jenkins tiene que tener el plugin de dockerpipeline y docker) 

reporte

establecemos post stage en pipeline que publica un html - ver jenkinsfile (el plugin de html publisher está instalado ya sino, habría que hacerlo)
--una vez ejecutado el job en jenkins - aparece en la columna izquierda un playwright report pero sin nada-- en la config de jenkins script console vamos navegando o hacemos algo ahí en la consola para que refresque cache
System.setProperty("hudson.model.DirectoryBrowserSupport.CSP","")...esto limpia cache ..volvemos y ya se ve el reporte






